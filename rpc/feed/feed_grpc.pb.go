// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: feed.proto

package landmark_feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LandmarkFeedClient is the client API for LandmarkFeed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LandmarkFeedClient interface {
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
}

type landmarkFeedClient struct {
	cc grpc.ClientConnInterface
}

func NewLandmarkFeedClient(cc grpc.ClientConnInterface) LandmarkFeedClient {
	return &landmarkFeedClient{cc}
}

func (c *landmarkFeedClient) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, "/landmark.feed_server.LandmarkFeed/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LandmarkFeedServer is the server API for LandmarkFeed service.
// All implementations must embed UnimplementedLandmarkFeedServer
// for forward compatibility
type LandmarkFeedServer interface {
	GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error)
	mustEmbedUnimplementedLandmarkFeedServer()
}

// UnimplementedLandmarkFeedServer must be embedded to have forward compatible implementations.
type UnimplementedLandmarkFeedServer struct {
}

func (UnimplementedLandmarkFeedServer) GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedLandmarkFeedServer) mustEmbedUnimplementedLandmarkFeedServer() {}

// UnsafeLandmarkFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LandmarkFeedServer will
// result in compilation errors.
type UnsafeLandmarkFeedServer interface {
	mustEmbedUnimplementedLandmarkFeedServer()
}

func RegisterLandmarkFeedServer(s grpc.ServiceRegistrar, srv LandmarkFeedServer) {
	s.RegisterService(&LandmarkFeed_ServiceDesc, srv)
}

func _LandmarkFeed_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandmarkFeedServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.feed_server.LandmarkFeed/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandmarkFeedServer).GetFeed(ctx, req.(*GetFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LandmarkFeed_ServiceDesc is the grpc.ServiceDesc for LandmarkFeed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LandmarkFeed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "landmark.feed_server.LandmarkFeed",
	HandlerType: (*LandmarkFeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeed",
			Handler:    _LandmarkFeed_GetFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
