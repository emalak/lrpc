// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: storage.proto

package landmark_storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	// Landmark
	GetLandmark(ctx context.Context, in *GetLandmarkRequest, opts ...grpc.CallOption) (*GetLandmarkResponse, error)
	GetLandmarksByTag(ctx context.Context, in *GetLandmarksByTagRequest, opts ...grpc.CallOption) (*GetLandmarksByTagResponse, error)
	AddLandmark(ctx context.Context, in *AddLandmarkRequest, opts ...grpc.CallOption) (*AddLandmarkResponse, error)
	LikeLandmark(ctx context.Context, in *LikeLandmarkRequest, opts ...grpc.CallOption) (*LikeLandmarkResponse, error)
	DislikeLandmark(ctx context.Context, in *DislikeLandmarkRequest, opts ...grpc.CallOption) (*DislikeLandmarkResponse, error)
	GetLikes(ctx context.Context, in *GetLikesRequest, opts ...grpc.CallOption) (*GetLikesResponse, error)
	ViewLandmark(ctx context.Context, in *ViewLandmarkRequest, opts ...grpc.CallOption) (*ViewLandmarkResponse, error)
	GetFavouriteLandmarks(ctx context.Context, in *GetFavouriteLandmarksRequest, opts ...grpc.CallOption) (*GetFavouriteLandmarksResponse, error)
	GetLikesAmount(ctx context.Context, in *GetLikesAmountRequest, opts ...grpc.CallOption) (*GetLikesAmountResponse, error)
	GetLandmarksFiltered(ctx context.Context, in *GetLandmarksFilteredRequest, opts ...grpc.CallOption) (*GetLandmarksFilteredResponse, error)
	UpdateLandmarkScore(ctx context.Context, in *UpdateLandmarkScoreRequest, opts ...grpc.CallOption) (*UpdateLandmarkScoreResponse, error)
	GetRecentFriendsFavourites(ctx context.Context, in *GetRecentFriendsFavouritesRequest, opts ...grpc.CallOption) (*GetRecentFriendsFavouritesResponse, error)
	SetLandmarkScore(ctx context.Context, in *SetLandmarkScoreRequest, opts ...grpc.CallOption) (*SetLandmarkScoreResponse, error)
	NotInterested(ctx context.Context, in *NotInterestedRequest, opts ...grpc.CallOption) (*NotInterestedResponse, error)
	DeleteLandmark(ctx context.Context, in *DeleteLandmarkRequest, opts ...grpc.CallOption) (*DeleteLandmarkResponse, error)
	// User feed
	RecommendLandmarks(ctx context.Context, in *RecommendLandmarksRequest, opts ...grpc.CallOption) (*RecommendLandmarksResponse, error)
	GetRandomFeed(ctx context.Context, in *GetRandomFeedRequest, opts ...grpc.CallOption) (*GetRandomFeedResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	// Comments
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	GetProfileComments(ctx context.Context, in *GetProfileCommentsRequest, opts ...grpc.CallOption) (*GetProfileCommentsResponse, error)
	CountReviews(ctx context.Context, in *CountReviewsRequest, opts ...grpc.CallOption) (*CountReviewsResponse, error)
	IsReviewedBy(ctx context.Context, in *IsReviewedRequest, opts ...grpc.CallOption) (*IsReviewedResponse, error)
	GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*GetReviewResponse, error)
	// Friends
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error)
	GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error)
	CountFriends(ctx context.Context, in *CountFriendsRequest, opts ...grpc.CallOption) (*CountFriendsResponse, error)
	IsFriend(ctx context.Context, in *IsFriendRequest, opts ...grpc.CallOption) (*IsFriendResponse, error)
	// Tags
	AddLandmarkTag(ctx context.Context, in *AddLandmarkTagRequest, opts ...grpc.CallOption) (*AddLandmarkTagResponse, error)
	RemoveLandmarkTag(ctx context.Context, in *RemoveLandmarkTagRequest, opts ...grpc.CallOption) (*RemoveLandmarkTagResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	SetUserTag(ctx context.Context, in *SetUserTagRequest, opts ...grpc.CallOption) (*SetUserTagResponse, error)
	DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...grpc.CallOption) (*DeleteUserTagResponse, error)
	GetUserTags(ctx context.Context, in *GetUserTagsRequest, opts ...grpc.CallOption) (*GetUserTagsResponse, error)
	GetLandmarkTags(ctx context.Context, in *GetLandmarkTagsRequest, opts ...grpc.CallOption) (*GetLandmarkTagsResponse, error)
	ConnectTags(ctx context.Context, in *ConnectTagsRequest, opts ...grpc.CallOption) (*ConnectTagsResponse, error)
	DisconnectTags(ctx context.Context, in *DisconnectTagsRequest, opts ...grpc.CallOption) (*DisconnectTagsResponse, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
	GetConnectedTags(ctx context.Context, in *GetConnectedTagsRequest, opts ...grpc.CallOption) (*GetConnectedTagsResponse, error)
	ChangeUserTags(ctx context.Context, in *ChangeUserTagsRequest, opts ...grpc.CallOption) (*ChangeUserTagsResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) GetLandmark(ctx context.Context, in *GetLandmarkRequest, opts ...grpc.CallOption) (*GetLandmarkResponse, error) {
	out := new(GetLandmarkResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetLandmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetLandmarksByTag(ctx context.Context, in *GetLandmarksByTagRequest, opts ...grpc.CallOption) (*GetLandmarksByTagResponse, error) {
	out := new(GetLandmarksByTagResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetLandmarksByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) AddLandmark(ctx context.Context, in *AddLandmarkRequest, opts ...grpc.CallOption) (*AddLandmarkResponse, error) {
	out := new(AddLandmarkResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/AddLandmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) LikeLandmark(ctx context.Context, in *LikeLandmarkRequest, opts ...grpc.CallOption) (*LikeLandmarkResponse, error) {
	out := new(LikeLandmarkResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/LikeLandmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DislikeLandmark(ctx context.Context, in *DislikeLandmarkRequest, opts ...grpc.CallOption) (*DislikeLandmarkResponse, error) {
	out := new(DislikeLandmarkResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/DislikeLandmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetLikes(ctx context.Context, in *GetLikesRequest, opts ...grpc.CallOption) (*GetLikesResponse, error) {
	out := new(GetLikesResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ViewLandmark(ctx context.Context, in *ViewLandmarkRequest, opts ...grpc.CallOption) (*ViewLandmarkResponse, error) {
	out := new(ViewLandmarkResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/ViewLandmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetFavouriteLandmarks(ctx context.Context, in *GetFavouriteLandmarksRequest, opts ...grpc.CallOption) (*GetFavouriteLandmarksResponse, error) {
	out := new(GetFavouriteLandmarksResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetFavouriteLandmarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetLikesAmount(ctx context.Context, in *GetLikesAmountRequest, opts ...grpc.CallOption) (*GetLikesAmountResponse, error) {
	out := new(GetLikesAmountResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetLikesAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetLandmarksFiltered(ctx context.Context, in *GetLandmarksFilteredRequest, opts ...grpc.CallOption) (*GetLandmarksFilteredResponse, error) {
	out := new(GetLandmarksFilteredResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetLandmarksFiltered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) UpdateLandmarkScore(ctx context.Context, in *UpdateLandmarkScoreRequest, opts ...grpc.CallOption) (*UpdateLandmarkScoreResponse, error) {
	out := new(UpdateLandmarkScoreResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/UpdateLandmarkScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetRecentFriendsFavourites(ctx context.Context, in *GetRecentFriendsFavouritesRequest, opts ...grpc.CallOption) (*GetRecentFriendsFavouritesResponse, error) {
	out := new(GetRecentFriendsFavouritesResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetRecentFriendsFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) SetLandmarkScore(ctx context.Context, in *SetLandmarkScoreRequest, opts ...grpc.CallOption) (*SetLandmarkScoreResponse, error) {
	out := new(SetLandmarkScoreResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/SetLandmarkScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) NotInterested(ctx context.Context, in *NotInterestedRequest, opts ...grpc.CallOption) (*NotInterestedResponse, error) {
	out := new(NotInterestedResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/NotInterested", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteLandmark(ctx context.Context, in *DeleteLandmarkRequest, opts ...grpc.CallOption) (*DeleteLandmarkResponse, error) {
	out := new(DeleteLandmarkResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/DeleteLandmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) RecommendLandmarks(ctx context.Context, in *RecommendLandmarksRequest, opts ...grpc.CallOption) (*RecommendLandmarksResponse, error) {
	out := new(RecommendLandmarksResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/RecommendLandmarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetRandomFeed(ctx context.Context, in *GetRandomFeedRequest, opts ...grpc.CallOption) (*GetRandomFeedResponse, error) {
	out := new(GetRandomFeedResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetRandomFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error) {
	out := new(EditCommentResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/EditComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetProfileComments(ctx context.Context, in *GetProfileCommentsRequest, opts ...grpc.CallOption) (*GetProfileCommentsResponse, error) {
	out := new(GetProfileCommentsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetProfileComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CountReviews(ctx context.Context, in *CountReviewsRequest, opts ...grpc.CallOption) (*CountReviewsResponse, error) {
	out := new(CountReviewsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/CountReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) IsReviewedBy(ctx context.Context, in *IsReviewedRequest, opts ...grpc.CallOption) (*IsReviewedResponse, error) {
	out := new(IsReviewedResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/IsReviewedBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*GetReviewResponse, error) {
	out := new(GetReviewResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error) {
	out := new(AddFriendResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error) {
	out := new(DeleteFriendResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error) {
	out := new(GetFriendsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CountFriends(ctx context.Context, in *CountFriendsRequest, opts ...grpc.CallOption) (*CountFriendsResponse, error) {
	out := new(CountFriendsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/CountFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) IsFriend(ctx context.Context, in *IsFriendRequest, opts ...grpc.CallOption) (*IsFriendResponse, error) {
	out := new(IsFriendResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/IsFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) AddLandmarkTag(ctx context.Context, in *AddLandmarkTagRequest, opts ...grpc.CallOption) (*AddLandmarkTagResponse, error) {
	out := new(AddLandmarkTagResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/AddLandmarkTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) RemoveLandmarkTag(ctx context.Context, in *RemoveLandmarkTagRequest, opts ...grpc.CallOption) (*RemoveLandmarkTagResponse, error) {
	out := new(RemoveLandmarkTagResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/RemoveLandmarkTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) SetUserTag(ctx context.Context, in *SetUserTagRequest, opts ...grpc.CallOption) (*SetUserTagResponse, error) {
	out := new(SetUserTagResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/SetUserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...grpc.CallOption) (*DeleteUserTagResponse, error) {
	out := new(DeleteUserTagResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/DeleteUserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetUserTags(ctx context.Context, in *GetUserTagsRequest, opts ...grpc.CallOption) (*GetUserTagsResponse, error) {
	out := new(GetUserTagsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetUserTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetLandmarkTags(ctx context.Context, in *GetLandmarkTagsRequest, opts ...grpc.CallOption) (*GetLandmarkTagsResponse, error) {
	out := new(GetLandmarkTagsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetLandmarkTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ConnectTags(ctx context.Context, in *ConnectTagsRequest, opts ...grpc.CallOption) (*ConnectTagsResponse, error) {
	out := new(ConnectTagsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/ConnectTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DisconnectTags(ctx context.Context, in *DisconnectTagsRequest, opts ...grpc.CallOption) (*DisconnectTagsResponse, error) {
	out := new(DisconnectTagsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/DisconnectTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetConnectedTags(ctx context.Context, in *GetConnectedTagsRequest, opts ...grpc.CallOption) (*GetConnectedTagsResponse, error) {
	out := new(GetConnectedTagsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/GetConnectedTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ChangeUserTags(ctx context.Context, in *ChangeUserTagsRequest, opts ...grpc.CallOption) (*ChangeUserTagsResponse, error) {
	out := new(ChangeUserTagsResponse)
	err := c.cc.Invoke(ctx, "/landmark.storage.StorageService/ChangeUserTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	// Landmark
	GetLandmark(context.Context, *GetLandmarkRequest) (*GetLandmarkResponse, error)
	GetLandmarksByTag(context.Context, *GetLandmarksByTagRequest) (*GetLandmarksByTagResponse, error)
	AddLandmark(context.Context, *AddLandmarkRequest) (*AddLandmarkResponse, error)
	LikeLandmark(context.Context, *LikeLandmarkRequest) (*LikeLandmarkResponse, error)
	DislikeLandmark(context.Context, *DislikeLandmarkRequest) (*DislikeLandmarkResponse, error)
	GetLikes(context.Context, *GetLikesRequest) (*GetLikesResponse, error)
	ViewLandmark(context.Context, *ViewLandmarkRequest) (*ViewLandmarkResponse, error)
	GetFavouriteLandmarks(context.Context, *GetFavouriteLandmarksRequest) (*GetFavouriteLandmarksResponse, error)
	GetLikesAmount(context.Context, *GetLikesAmountRequest) (*GetLikesAmountResponse, error)
	GetLandmarksFiltered(context.Context, *GetLandmarksFilteredRequest) (*GetLandmarksFilteredResponse, error)
	UpdateLandmarkScore(context.Context, *UpdateLandmarkScoreRequest) (*UpdateLandmarkScoreResponse, error)
	GetRecentFriendsFavourites(context.Context, *GetRecentFriendsFavouritesRequest) (*GetRecentFriendsFavouritesResponse, error)
	SetLandmarkScore(context.Context, *SetLandmarkScoreRequest) (*SetLandmarkScoreResponse, error)
	NotInterested(context.Context, *NotInterestedRequest) (*NotInterestedResponse, error)
	DeleteLandmark(context.Context, *DeleteLandmarkRequest) (*DeleteLandmarkResponse, error)
	// User feed
	RecommendLandmarks(context.Context, *RecommendLandmarksRequest) (*RecommendLandmarksResponse, error)
	GetRandomFeed(context.Context, *GetRandomFeedRequest) (*GetRandomFeedResponse, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	// Comments
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	EditComment(context.Context, *EditCommentRequest) (*EditCommentResponse, error)
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	GetProfileComments(context.Context, *GetProfileCommentsRequest) (*GetProfileCommentsResponse, error)
	CountReviews(context.Context, *CountReviewsRequest) (*CountReviewsResponse, error)
	IsReviewedBy(context.Context, *IsReviewedRequest) (*IsReviewedResponse, error)
	GetReview(context.Context, *GetReviewRequest) (*GetReviewResponse, error)
	// Friends
	AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error)
	DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error)
	GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error)
	CountFriends(context.Context, *CountFriendsRequest) (*CountFriendsResponse, error)
	IsFriend(context.Context, *IsFriendRequest) (*IsFriendResponse, error)
	// Tags
	AddLandmarkTag(context.Context, *AddLandmarkTagRequest) (*AddLandmarkTagResponse, error)
	RemoveLandmarkTag(context.Context, *RemoveLandmarkTagRequest) (*RemoveLandmarkTagResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	SetUserTag(context.Context, *SetUserTagRequest) (*SetUserTagResponse, error)
	DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error)
	GetUserTags(context.Context, *GetUserTagsRequest) (*GetUserTagsResponse, error)
	GetLandmarkTags(context.Context, *GetLandmarkTagsRequest) (*GetLandmarkTagsResponse, error)
	ConnectTags(context.Context, *ConnectTagsRequest) (*ConnectTagsResponse, error)
	DisconnectTags(context.Context, *DisconnectTagsRequest) (*DisconnectTagsResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	GetConnectedTags(context.Context, *GetConnectedTagsRequest) (*GetConnectedTagsResponse, error)
	ChangeUserTags(context.Context, *ChangeUserTagsRequest) (*ChangeUserTagsResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) GetLandmark(context.Context, *GetLandmarkRequest) (*GetLandmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLandmark not implemented")
}
func (UnimplementedStorageServiceServer) GetLandmarksByTag(context.Context, *GetLandmarksByTagRequest) (*GetLandmarksByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLandmarksByTag not implemented")
}
func (UnimplementedStorageServiceServer) AddLandmark(context.Context, *AddLandmarkRequest) (*AddLandmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLandmark not implemented")
}
func (UnimplementedStorageServiceServer) LikeLandmark(context.Context, *LikeLandmarkRequest) (*LikeLandmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeLandmark not implemented")
}
func (UnimplementedStorageServiceServer) DislikeLandmark(context.Context, *DislikeLandmarkRequest) (*DislikeLandmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeLandmark not implemented")
}
func (UnimplementedStorageServiceServer) GetLikes(context.Context, *GetLikesRequest) (*GetLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikes not implemented")
}
func (UnimplementedStorageServiceServer) ViewLandmark(context.Context, *ViewLandmarkRequest) (*ViewLandmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewLandmark not implemented")
}
func (UnimplementedStorageServiceServer) GetFavouriteLandmarks(context.Context, *GetFavouriteLandmarksRequest) (*GetFavouriteLandmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavouriteLandmarks not implemented")
}
func (UnimplementedStorageServiceServer) GetLikesAmount(context.Context, *GetLikesAmountRequest) (*GetLikesAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikesAmount not implemented")
}
func (UnimplementedStorageServiceServer) GetLandmarksFiltered(context.Context, *GetLandmarksFilteredRequest) (*GetLandmarksFilteredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLandmarksFiltered not implemented")
}
func (UnimplementedStorageServiceServer) UpdateLandmarkScore(context.Context, *UpdateLandmarkScoreRequest) (*UpdateLandmarkScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLandmarkScore not implemented")
}
func (UnimplementedStorageServiceServer) GetRecentFriendsFavourites(context.Context, *GetRecentFriendsFavouritesRequest) (*GetRecentFriendsFavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentFriendsFavourites not implemented")
}
func (UnimplementedStorageServiceServer) SetLandmarkScore(context.Context, *SetLandmarkScoreRequest) (*SetLandmarkScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLandmarkScore not implemented")
}
func (UnimplementedStorageServiceServer) NotInterested(context.Context, *NotInterestedRequest) (*NotInterestedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotInterested not implemented")
}
func (UnimplementedStorageServiceServer) DeleteLandmark(context.Context, *DeleteLandmarkRequest) (*DeleteLandmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLandmark not implemented")
}
func (UnimplementedStorageServiceServer) RecommendLandmarks(context.Context, *RecommendLandmarksRequest) (*RecommendLandmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendLandmarks not implemented")
}
func (UnimplementedStorageServiceServer) GetRandomFeed(context.Context, *GetRandomFeedRequest) (*GetRandomFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomFeed not implemented")
}
func (UnimplementedStorageServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedStorageServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedStorageServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedStorageServiceServer) EditComment(context.Context, *EditCommentRequest) (*EditCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComment not implemented")
}
func (UnimplementedStorageServiceServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedStorageServiceServer) GetProfileComments(context.Context, *GetProfileCommentsRequest) (*GetProfileCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileComments not implemented")
}
func (UnimplementedStorageServiceServer) CountReviews(context.Context, *CountReviewsRequest) (*CountReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountReviews not implemented")
}
func (UnimplementedStorageServiceServer) IsReviewedBy(context.Context, *IsReviewedRequest) (*IsReviewedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReviewedBy not implemented")
}
func (UnimplementedStorageServiceServer) GetReview(context.Context, *GetReviewRequest) (*GetReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReview not implemented")
}
func (UnimplementedStorageServiceServer) AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedStorageServiceServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedStorageServiceServer) GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedStorageServiceServer) CountFriends(context.Context, *CountFriendsRequest) (*CountFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFriends not implemented")
}
func (UnimplementedStorageServiceServer) IsFriend(context.Context, *IsFriendRequest) (*IsFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFriend not implemented")
}
func (UnimplementedStorageServiceServer) AddLandmarkTag(context.Context, *AddLandmarkTagRequest) (*AddLandmarkTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLandmarkTag not implemented")
}
func (UnimplementedStorageServiceServer) RemoveLandmarkTag(context.Context, *RemoveLandmarkTagRequest) (*RemoveLandmarkTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLandmarkTag not implemented")
}
func (UnimplementedStorageServiceServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedStorageServiceServer) SetUserTag(context.Context, *SetUserTagRequest) (*SetUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserTag not implemented")
}
func (UnimplementedStorageServiceServer) DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTag not implemented")
}
func (UnimplementedStorageServiceServer) GetUserTags(context.Context, *GetUserTagsRequest) (*GetUserTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTags not implemented")
}
func (UnimplementedStorageServiceServer) GetLandmarkTags(context.Context, *GetLandmarkTagsRequest) (*GetLandmarkTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLandmarkTags not implemented")
}
func (UnimplementedStorageServiceServer) ConnectTags(context.Context, *ConnectTagsRequest) (*ConnectTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectTags not implemented")
}
func (UnimplementedStorageServiceServer) DisconnectTags(context.Context, *DisconnectTagsRequest) (*DisconnectTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectTags not implemented")
}
func (UnimplementedStorageServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedStorageServiceServer) GetConnectedTags(context.Context, *GetConnectedTagsRequest) (*GetConnectedTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedTags not implemented")
}
func (UnimplementedStorageServiceServer) ChangeUserTags(context.Context, *ChangeUserTagsRequest) (*ChangeUserTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserTags not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_GetLandmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetLandmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetLandmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetLandmark(ctx, req.(*GetLandmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetLandmarksByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandmarksByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetLandmarksByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetLandmarksByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetLandmarksByTag(ctx, req.(*GetLandmarksByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_AddLandmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLandmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).AddLandmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/AddLandmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).AddLandmark(ctx, req.(*AddLandmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_LikeLandmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeLandmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).LikeLandmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/LikeLandmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).LikeLandmark(ctx, req.(*LikeLandmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DislikeLandmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeLandmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DislikeLandmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/DislikeLandmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DislikeLandmark(ctx, req.(*DislikeLandmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetLikes(ctx, req.(*GetLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ViewLandmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewLandmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ViewLandmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/ViewLandmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ViewLandmark(ctx, req.(*ViewLandmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetFavouriteLandmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavouriteLandmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetFavouriteLandmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetFavouriteLandmarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetFavouriteLandmarks(ctx, req.(*GetFavouriteLandmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetLikesAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetLikesAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetLikesAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetLikesAmount(ctx, req.(*GetLikesAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetLandmarksFiltered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandmarksFilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetLandmarksFiltered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetLandmarksFiltered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetLandmarksFiltered(ctx, req.(*GetLandmarksFilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_UpdateLandmarkScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLandmarkScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).UpdateLandmarkScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/UpdateLandmarkScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).UpdateLandmarkScore(ctx, req.(*UpdateLandmarkScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetRecentFriendsFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentFriendsFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetRecentFriendsFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetRecentFriendsFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetRecentFriendsFavourites(ctx, req.(*GetRecentFriendsFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_SetLandmarkScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLandmarkScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).SetLandmarkScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/SetLandmarkScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).SetLandmarkScore(ctx, req.(*SetLandmarkScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_NotInterested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotInterestedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).NotInterested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/NotInterested",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).NotInterested(ctx, req.(*NotInterestedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteLandmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLandmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteLandmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/DeleteLandmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteLandmark(ctx, req.(*DeleteLandmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_RecommendLandmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendLandmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).RecommendLandmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/RecommendLandmarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).RecommendLandmarks(ctx, req.(*RecommendLandmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetRandomFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetRandomFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetRandomFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetRandomFeed(ctx, req.(*GetRandomFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_EditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).EditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/EditComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).EditComment(ctx, req.(*EditCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetProfileComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetProfileComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetProfileComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetProfileComments(ctx, req.(*GetProfileCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CountReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CountReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/CountReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CountReviews(ctx, req.(*CountReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_IsReviewedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReviewedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).IsReviewedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/IsReviewedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).IsReviewedBy(ctx, req.(*IsReviewedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetReview(ctx, req.(*GetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetFriends(ctx, req.(*GetFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CountFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CountFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/CountFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CountFriends(ctx, req.(*CountFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_IsFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).IsFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/IsFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).IsFriend(ctx, req.(*IsFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_AddLandmarkTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLandmarkTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).AddLandmarkTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/AddLandmarkTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).AddLandmarkTag(ctx, req.(*AddLandmarkTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_RemoveLandmarkTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLandmarkTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).RemoveLandmarkTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/RemoveLandmarkTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).RemoveLandmarkTag(ctx, req.(*RemoveLandmarkTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_SetUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).SetUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/SetUserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).SetUserTag(ctx, req.(*SetUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/DeleteUserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteUserTag(ctx, req.(*DeleteUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetUserTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetUserTags(ctx, req.(*GetUserTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetLandmarkTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandmarkTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetLandmarkTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetLandmarkTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetLandmarkTags(ctx, req.(*GetLandmarkTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ConnectTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ConnectTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/ConnectTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ConnectTags(ctx, req.(*ConnectTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DisconnectTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DisconnectTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/DisconnectTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DisconnectTags(ctx, req.(*DisconnectTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetConnectedTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectedTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetConnectedTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/GetConnectedTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetConnectedTags(ctx, req.(*GetConnectedTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ChangeUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ChangeUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landmark.storage.StorageService/ChangeUserTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ChangeUserTags(ctx, req.(*ChangeUserTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "landmark.storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLandmark",
			Handler:    _StorageService_GetLandmark_Handler,
		},
		{
			MethodName: "GetLandmarksByTag",
			Handler:    _StorageService_GetLandmarksByTag_Handler,
		},
		{
			MethodName: "AddLandmark",
			Handler:    _StorageService_AddLandmark_Handler,
		},
		{
			MethodName: "LikeLandmark",
			Handler:    _StorageService_LikeLandmark_Handler,
		},
		{
			MethodName: "DislikeLandmark",
			Handler:    _StorageService_DislikeLandmark_Handler,
		},
		{
			MethodName: "GetLikes",
			Handler:    _StorageService_GetLikes_Handler,
		},
		{
			MethodName: "ViewLandmark",
			Handler:    _StorageService_ViewLandmark_Handler,
		},
		{
			MethodName: "GetFavouriteLandmarks",
			Handler:    _StorageService_GetFavouriteLandmarks_Handler,
		},
		{
			MethodName: "GetLikesAmount",
			Handler:    _StorageService_GetLikesAmount_Handler,
		},
		{
			MethodName: "GetLandmarksFiltered",
			Handler:    _StorageService_GetLandmarksFiltered_Handler,
		},
		{
			MethodName: "UpdateLandmarkScore",
			Handler:    _StorageService_UpdateLandmarkScore_Handler,
		},
		{
			MethodName: "GetRecentFriendsFavourites",
			Handler:    _StorageService_GetRecentFriendsFavourites_Handler,
		},
		{
			MethodName: "SetLandmarkScore",
			Handler:    _StorageService_SetLandmarkScore_Handler,
		},
		{
			MethodName: "NotInterested",
			Handler:    _StorageService_NotInterested_Handler,
		},
		{
			MethodName: "DeleteLandmark",
			Handler:    _StorageService_DeleteLandmark_Handler,
		},
		{
			MethodName: "RecommendLandmarks",
			Handler:    _StorageService_RecommendLandmarks_Handler,
		},
		{
			MethodName: "GetRandomFeed",
			Handler:    _StorageService_GetRandomFeed_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _StorageService_AddUser_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _StorageService_CreateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _StorageService_DeleteComment_Handler,
		},
		{
			MethodName: "EditComment",
			Handler:    _StorageService_EditComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _StorageService_GetComments_Handler,
		},
		{
			MethodName: "GetProfileComments",
			Handler:    _StorageService_GetProfileComments_Handler,
		},
		{
			MethodName: "CountReviews",
			Handler:    _StorageService_CountReviews_Handler,
		},
		{
			MethodName: "IsReviewedBy",
			Handler:    _StorageService_IsReviewedBy_Handler,
		},
		{
			MethodName: "GetReview",
			Handler:    _StorageService_GetReview_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _StorageService_AddFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _StorageService_DeleteFriend_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _StorageService_GetFriends_Handler,
		},
		{
			MethodName: "CountFriends",
			Handler:    _StorageService_CountFriends_Handler,
		},
		{
			MethodName: "IsFriend",
			Handler:    _StorageService_IsFriend_Handler,
		},
		{
			MethodName: "AddLandmarkTag",
			Handler:    _StorageService_AddLandmarkTag_Handler,
		},
		{
			MethodName: "RemoveLandmarkTag",
			Handler:    _StorageService_RemoveLandmarkTag_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _StorageService_CreateTag_Handler,
		},
		{
			MethodName: "SetUserTag",
			Handler:    _StorageService_SetUserTag_Handler,
		},
		{
			MethodName: "DeleteUserTag",
			Handler:    _StorageService_DeleteUserTag_Handler,
		},
		{
			MethodName: "GetUserTags",
			Handler:    _StorageService_GetUserTags_Handler,
		},
		{
			MethodName: "GetLandmarkTags",
			Handler:    _StorageService_GetLandmarkTags_Handler,
		},
		{
			MethodName: "ConnectTags",
			Handler:    _StorageService_ConnectTags_Handler,
		},
		{
			MethodName: "DisconnectTags",
			Handler:    _StorageService_DisconnectTags_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _StorageService_DeleteTag_Handler,
		},
		{
			MethodName: "GetConnectedTags",
			Handler:    _StorageService_GetConnectedTags_Handler,
		},
		{
			MethodName: "ChangeUserTags",
			Handler:    _StorageService_ChangeUserTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
